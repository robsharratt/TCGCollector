// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TCGCollector.Models;

namespace TCGCollector.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("TCGCollector.Models.Ability", b =>
                {
                    b.Property<int>("AbilityID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AbilityName");

                    b.Property<string>("AbilityText")
                        .HasMaxLength(1024);

                    b.Property<string>("AbilityType");

                    b.Property<DateTime>("LastUpdateDate");

                    b.HasKey("AbilityID");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("TCGCollector.Models.Attack", b =>
                {
                    b.Property<int>("AttackID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttackConvertedEnergyCost");

                    b.Property<string>("AttackDamage");

                    b.Property<string>("AttackName");

                    b.Property<string>("AttackText")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("LastUpdateDate");

                    b.HasKey("AttackID");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("TCGCollector.Models.AttackEnergy", b =>
                {
                    b.Property<int>("AttackEnergyID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttackID");

                    b.Property<int>("EnergyTypeID");

                    b.HasKey("AttackEnergyID");

                    b.HasIndex("AttackID");

                    b.HasIndex("EnergyTypeID");

                    b.ToTable("AttackEnergies");
                });

            modelBuilder.Entity("TCGCollector.Models.Card", b =>
                {
                    b.Property<int>("CardID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Artist");

                    b.Property<int?>("CardCatID");

                    b.Property<string>("CardImageHiLocalURL");

                    b.Property<string>("CardImageHiURL");

                    b.Property<string>("CardImageLocalURL");

                    b.Property<string>("CardImageURL");

                    b.Property<string>("CardName");

                    b.Property<string>("CardNum");

                    b.Property<int?>("CardRarityID");

                    b.Property<int?>("CardTypeID");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<int?>("SetID");

                    b.HasKey("CardID");

                    b.HasIndex("CardCatID");

                    b.HasIndex("CardRarityID");

                    b.HasIndex("CardTypeID");

                    b.HasIndex("SetID");

                    b.ToTable("Cards");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Card");
                });

            modelBuilder.Entity("TCGCollector.Models.CardCat", b =>
                {
                    b.Property<int>("CardCatID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardCatName");

                    b.Property<DateTime>("LastUpdateDate");

                    b.HasKey("CardCatID");

                    b.ToTable("CardCats");
                });

            modelBuilder.Entity("TCGCollector.Models.CardCollection", b =>
                {
                    b.Property<int>("CardCollectionID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardCollectionName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("LastUpdateDate");

                    b.HasKey("CardCollectionID");

                    b.ToTable("CardCollections");
                });

            modelBuilder.Entity("TCGCollector.Models.CardRarity", b =>
                {
                    b.Property<int>("CardRarityID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardRarityName");

                    b.Property<DateTime>("LastUpdateDate");

                    b.HasKey("CardRarityID");

                    b.ToTable("CardRarities");
                });

            modelBuilder.Entity("TCGCollector.Models.CardType", b =>
                {
                    b.Property<int>("CardTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardTypeName");

                    b.Property<DateTime>("LastUpdateDate");

                    b.HasKey("CardTypeID");

                    b.ToTable("CardTypes");
                });

            modelBuilder.Entity("TCGCollector.Models.EnergyType", b =>
                {
                    b.Property<int>("EnergyTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EnergyTypeName");

                    b.Property<DateTime>("LastUpdateDate");

                    b.HasKey("EnergyTypeID");

                    b.ToTable("EnergyTypes");
                });

            modelBuilder.Entity("TCGCollector.Models.EvolvesTo", b =>
                {
                    b.Property<int>("EvolvesToID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EvolvesToName");

                    b.Property<DateTime>("LastUpdateDate");

                    b.HasKey("EvolvesToID");

                    b.ToTable("EvolvesTos");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardAbility", b =>
                {
                    b.Property<int>("CardID");

                    b.Property<int>("AbilityID");

                    b.HasKey("CardID", "AbilityID");

                    b.HasIndex("AbilityID");

                    b.ToTable("PokemonCardAbilities");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardAttack", b =>
                {
                    b.Property<int>("CardID");

                    b.Property<int>("AttackID");

                    b.HasKey("CardID", "AttackID");

                    b.HasIndex("AttackID");

                    b.ToTable("PokemonCardAttacks");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardEvolvesTo", b =>
                {
                    b.Property<int>("CardID");

                    b.Property<int>("EvolvesToID");

                    b.HasKey("CardID", "EvolvesToID");

                    b.HasIndex("EvolvesToID");

                    b.ToTable("PokemonCardEvolvesTos");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardPokemonType", b =>
                {
                    b.Property<int>("PokemonCardPokemonTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CardID");

                    b.Property<int>("PokemonTypeID");

                    b.HasKey("PokemonCardPokemonTypeID");

                    b.HasIndex("CardID");

                    b.HasIndex("PokemonTypeID");

                    b.ToTable("PokemonCardPokemonTypes");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardResistance", b =>
                {
                    b.Property<int>("CardID");

                    b.Property<int>("ResistanceID");

                    b.HasKey("CardID", "ResistanceID");

                    b.HasIndex("ResistanceID");

                    b.ToTable("PokemonCardResistances");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardRetreatCost", b =>
                {
                    b.Property<int>("PokemonCardRetreatCostID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CardID");

                    b.Property<int>("EnergyTypeID");

                    b.HasKey("PokemonCardRetreatCostID");

                    b.HasIndex("CardID");

                    b.HasIndex("EnergyTypeID");

                    b.ToTable("PokemonCardRetreatCosts");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardWeakness", b =>
                {
                    b.Property<int>("CardID");

                    b.Property<int>("WeaknessID");

                    b.HasKey("CardID", "WeaknessID");

                    b.HasIndex("WeaknessID");

                    b.ToTable("PokemonCardWeaknesses");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonType", b =>
                {
                    b.Property<int>("PokemonTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("PokemonTypeName");

                    b.HasKey("PokemonTypeID");

                    b.ToTable("PokemonTypes");
                });

            modelBuilder.Entity("TCGCollector.Models.Resistance", b =>
                {
                    b.Property<int>("ResistanceID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EnergyTypeID");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("ResistanceValue");

                    b.HasKey("ResistanceID");

                    b.HasIndex("EnergyTypeID");

                    b.ToTable("Resistances");
                });

            modelBuilder.Entity("TCGCollector.Models.Set", b =>
                {
                    b.Property<int>("SetID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("SetCode");

                    b.Property<bool>("SetExpanded");

                    b.Property<string>("SetLogoLocalURL");

                    b.Property<string>("SetLogoURL");

                    b.Property<string>("SetName");

                    b.Property<string>("SetPTCGOCode");

                    b.Property<DateTime>("SetReleaseDate");

                    b.Property<int?>("SetSeriesID");

                    b.Property<bool>("SetStandard");

                    b.Property<string>("SetSymbolLocalURL");

                    b.Property<string>("SetSymbolURL");

                    b.Property<int>("SetTotalCards");

                    b.HasKey("SetID");

                    b.HasIndex("SetSeriesID");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("TCGCollector.Models.SetSeries", b =>
                {
                    b.Property<int>("SetSeriesID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("SetSeriesName");

                    b.HasKey("SetSeriesID");

                    b.ToTable("SetSeries");
                });

            modelBuilder.Entity("TCGCollector.Models.SpecialCardSpecialCardText", b =>
                {
                    b.Property<int>("CardID");

                    b.Property<int>("CardTextID");

                    b.HasKey("CardID", "CardTextID");

                    b.HasIndex("CardTextID");

                    b.ToTable("SpecialCardSpecialCardTexts");
                });

            modelBuilder.Entity("TCGCollector.Models.SpecialCardText", b =>
                {
                    b.Property<int>("SpecialCardTextID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardTextLine")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("LastUpdateDate");

                    b.HasKey("SpecialCardTextID");

                    b.ToTable("SpecialCardTexts");
                });

            modelBuilder.Entity("TCGCollector.Models.TrainerCardText", b =>
                {
                    b.Property<int>("TrainerCardTextID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardTextLine")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("LastUpdateDate");

                    b.HasKey("TrainerCardTextID");

                    b.ToTable("TrainerCardTexts");
                });

            modelBuilder.Entity("TCGCollector.Models.TrainerCardTrainerCardText", b =>
                {
                    b.Property<int>("CardID");

                    b.Property<int>("CardTextID");

                    b.HasKey("CardID", "CardTextID");

                    b.HasIndex("CardTextID");

                    b.ToTable("TrainerCardTrainerCardTexts");
                });

            modelBuilder.Entity("TCGCollector.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("Password");

                    b.Property<string>("UserLogin");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TCGCollector.Models.UserCardCollection", b =>
                {
                    b.Property<int>("UserID");

                    b.Property<int>("CardCollectionID");

                    b.HasKey("UserID", "CardCollectionID");

                    b.HasIndex("CardCollectionID");

                    b.ToTable("UserCardCollection");
                });

            modelBuilder.Entity("TCGCollector.Models.Weakness", b =>
                {
                    b.Property<int>("WeaknessID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EnergyTypeID");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("WeaknessValue");

                    b.HasKey("WeaknessID");

                    b.HasIndex("EnergyTypeID");

                    b.ToTable("Weaknesses");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCard", b =>
                {
                    b.HasBaseType("TCGCollector.Models.Card");

                    b.Property<int>("ConvertedRetreatCost");

                    b.Property<string>("EvolvesFrom");

                    b.Property<int>("HP");

                    b.Property<int>("NationalPokedexNumber");

                    b.HasDiscriminator().HasValue("PokemonCard");
                });

            modelBuilder.Entity("TCGCollector.Models.SpecialCard", b =>
                {
                    b.HasBaseType("TCGCollector.Models.Card");

                    b.HasDiscriminator().HasValue("SpecialCard");
                });

            modelBuilder.Entity("TCGCollector.Models.TrainerCard", b =>
                {
                    b.HasBaseType("TCGCollector.Models.Card");

                    b.HasDiscriminator().HasValue("TrainerCard");
                });

            modelBuilder.Entity("TCGCollector.Models.AttackEnergy", b =>
                {
                    b.HasOne("TCGCollector.Models.Attack", "Attack")
                        .WithMany("AttackEnergies")
                        .HasForeignKey("AttackID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TCGCollector.Models.EnergyType", "EnergyType")
                        .WithMany("AttackEnergies")
                        .HasForeignKey("EnergyTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCGCollector.Models.Card", b =>
                {
                    b.HasOne("TCGCollector.Models.CardCat", "CardCat")
                        .WithMany("Cards")
                        .HasForeignKey("CardCatID");

                    b.HasOne("TCGCollector.Models.CardRarity", "CardRarity")
                        .WithMany("Cards")
                        .HasForeignKey("CardRarityID");

                    b.HasOne("TCGCollector.Models.CardType", "CardType")
                        .WithMany("Cards")
                        .HasForeignKey("CardTypeID");

                    b.HasOne("TCGCollector.Models.Set", "Set")
                        .WithMany("Cards")
                        .HasForeignKey("SetID");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardAbility", b =>
                {
                    b.HasOne("TCGCollector.Models.Ability", "Ability")
                        .WithMany("PokemonCardAbilities")
                        .HasForeignKey("AbilityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TCGCollector.Models.PokemonCard", "PokemonCard")
                        .WithMany("PokemonCardAbilities")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardAttack", b =>
                {
                    b.HasOne("TCGCollector.Models.Attack", "Attack")
                        .WithMany("PokemonCardAttacks")
                        .HasForeignKey("AttackID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TCGCollector.Models.PokemonCard", "PokemonCard")
                        .WithMany("PokemonCardAttacks")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardEvolvesTo", b =>
                {
                    b.HasOne("TCGCollector.Models.PokemonCard", "PokemonCard")
                        .WithMany("PokemonCardEvolvesTos")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TCGCollector.Models.EvolvesTo", "EvolvesTo")
                        .WithMany("PokemonCardEvolvesTos")
                        .HasForeignKey("EvolvesToID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardPokemonType", b =>
                {
                    b.HasOne("TCGCollector.Models.PokemonCard", "PokemonCard")
                        .WithMany("PokemonCardPokemonTypes")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TCGCollector.Models.PokemonType", "PokemonType")
                        .WithMany("PokemonCardPokemonTypes")
                        .HasForeignKey("PokemonTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardResistance", b =>
                {
                    b.HasOne("TCGCollector.Models.PokemonCard", "PokemonCard")
                        .WithMany("PokemonCardResistances")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TCGCollector.Models.Resistance", "Resistance")
                        .WithMany("PokemonCardResistances")
                        .HasForeignKey("ResistanceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardRetreatCost", b =>
                {
                    b.HasOne("TCGCollector.Models.PokemonCard", "PokemonCard")
                        .WithMany("PokemonCardRetreatCosts")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TCGCollector.Models.EnergyType", "EnergyType")
                        .WithMany("PokemonCardRetreatCosts")
                        .HasForeignKey("EnergyTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardWeakness", b =>
                {
                    b.HasOne("TCGCollector.Models.PokemonCard", "PokemonCard")
                        .WithMany("PokemonCardWeaknesses")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TCGCollector.Models.Weakness", "Weakness")
                        .WithMany("PokemonCardWeaknesses")
                        .HasForeignKey("WeaknessID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCGCollector.Models.Resistance", b =>
                {
                    b.HasOne("TCGCollector.Models.EnergyType", "EnergyType")
                        .WithMany()
                        .HasForeignKey("EnergyTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCGCollector.Models.Set", b =>
                {
                    b.HasOne("TCGCollector.Models.SetSeries", "SetSeries")
                        .WithMany("Sets")
                        .HasForeignKey("SetSeriesID");
                });

            modelBuilder.Entity("TCGCollector.Models.SpecialCardSpecialCardText", b =>
                {
                    b.HasOne("TCGCollector.Models.SpecialCard", "SpecialCard")
                        .WithMany("SpecialCardSpecialCardTexts")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TCGCollector.Models.SpecialCardText", "CardText")
                        .WithMany("SpecialCardSpecialCardTexts")
                        .HasForeignKey("CardTextID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCGCollector.Models.TrainerCardTrainerCardText", b =>
                {
                    b.HasOne("TCGCollector.Models.TrainerCard", "TrainerCard")
                        .WithMany("TrainerCardTrainerCardTexts")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TCGCollector.Models.TrainerCardText", "CardText")
                        .WithMany("TrainerCardTrainerCardTexts")
                        .HasForeignKey("CardTextID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCGCollector.Models.UserCardCollection", b =>
                {
                    b.HasOne("TCGCollector.Models.CardCollection", "CardCollection")
                        .WithMany("UserCardCollections")
                        .HasForeignKey("CardCollectionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TCGCollector.Models.User", "User")
                        .WithMany("UserCardCollections")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCGCollector.Models.Weakness", b =>
                {
                    b.HasOne("TCGCollector.Models.EnergyType", "EnergyType")
                        .WithMany()
                        .HasForeignKey("EnergyTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
