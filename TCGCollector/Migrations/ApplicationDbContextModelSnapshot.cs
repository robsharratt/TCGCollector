// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TCGCollector.Models;

namespace TCGCollector.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("TCGCollector.Models.Ability", b =>
                {
                    b.Property<int>("AbilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AbilityName")
                        .HasColumnType("text");

                    b.Property<string>("AbilityText")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("AbilityType")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("AbilityID");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("TCGCollector.Models.Attack", b =>
                {
                    b.Property<int>("AttackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AttackConvertedEnergyCost")
                        .HasColumnType("integer");

                    b.Property<string>("AttackDamage")
                        .HasColumnType("text");

                    b.Property<string>("AttackName")
                        .HasColumnType("text");

                    b.Property<string>("AttackText")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("AttackID");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("TCGCollector.Models.AttackEnergy", b =>
                {
                    b.Property<int>("AttackEnergyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AttackID")
                        .HasColumnType("integer");

                    b.Property<int>("EnergyTypeID")
                        .HasColumnType("integer");

                    b.HasKey("AttackEnergyID");

                    b.HasIndex("AttackID");

                    b.HasIndex("EnergyTypeID");

                    b.ToTable("AttackEnergies");
                });

            modelBuilder.Entity("TCGCollector.Models.Card", b =>
                {
                    b.Property<int>("CardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Artist")
                        .HasColumnType("text");

                    b.Property<int?>("CardCatID")
                        .HasColumnType("integer");

                    b.Property<string>("CardImageHiLocalURL")
                        .HasColumnType("text");

                    b.Property<string>("CardImageHiURL")
                        .HasColumnType("text");

                    b.Property<string>("CardImageLocalURL")
                        .HasColumnType("text");

                    b.Property<string>("CardImageURL")
                        .HasColumnType("text");

                    b.Property<string>("CardName")
                        .HasColumnType("text");

                    b.Property<string>("CardNum")
                        .HasColumnType("text");

                    b.Property<int?>("CardRarityID")
                        .HasColumnType("integer");

                    b.Property<int?>("CardTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SetID")
                        .HasColumnType("integer");

                    b.HasKey("CardID");

                    b.HasIndex("CardCatID");

                    b.HasIndex("CardRarityID");

                    b.HasIndex("CardTypeID");

                    b.HasIndex("SetID");

                    b.ToTable("Cards");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Card");
                });

            modelBuilder.Entity("TCGCollector.Models.CardCat", b =>
                {
                    b.Property<int>("CardCatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CardCatName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CardCatID");

                    b.ToTable("CardCats");
                });

            modelBuilder.Entity("TCGCollector.Models.CardCollection", b =>
                {
                    b.Property<int>("CardCollectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CardCollectionName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CardCollectionID");

                    b.ToTable("CardCollections");
                });

            modelBuilder.Entity("TCGCollector.Models.CardRarity", b =>
                {
                    b.Property<int>("CardRarityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CardRarityName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CardRarityID");

                    b.ToTable("CardRarities");
                });

            modelBuilder.Entity("TCGCollector.Models.CardType", b =>
                {
                    b.Property<int>("CardTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CardTypeName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CardTypeID");

                    b.ToTable("CardTypes");
                });

            modelBuilder.Entity("TCGCollector.Models.EnergyType", b =>
                {
                    b.Property<int>("EnergyTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EnergyTypeName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EnergyTypeID");

                    b.ToTable("EnergyTypes");
                });

            modelBuilder.Entity("TCGCollector.Models.EvolvesTo", b =>
                {
                    b.Property<int>("EvolvesToID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EvolvesToName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EvolvesToID");

                    b.ToTable("EvolvesTos");
                });

            modelBuilder.Entity("TCGCollector.Models.MagicBlock", b =>
                {
                    b.Property<int>("MagicBlockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MagicBlockName")
                        .HasColumnType("text");

                    b.HasKey("MagicBlockID");

                    b.ToTable("MagicBlocks");
                });

            modelBuilder.Entity("TCGCollector.Models.MagicCard", b =>
                {
                    b.Property<int>("MagicCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MagicCardArtist")
                        .HasColumnType("text");

                    b.Property<bool>("MagicCardHasAltArt")
                        .HasColumnType("boolean");

                    b.Property<bool>("MagicCardHasFoil")
                        .HasColumnType("boolean");

                    b.Property<bool>("MagicCardHasNonFoil")
                        .HasColumnType("boolean");

                    b.Property<bool>("MagicCardIsArena")
                        .HasColumnType("boolean");

                    b.Property<bool>("MagicCardIsFullArt")
                        .HasColumnType("boolean");

                    b.Property<bool>("MagicCardIsMTGO")
                        .HasColumnType("boolean");

                    b.Property<bool>("MagicCardIsOnlineOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("MagicCardIsOversized")
                        .HasColumnType("boolean");

                    b.Property<bool>("MagicCardIsPaper")
                        .HasColumnType("boolean");

                    b.Property<bool>("MagicCardIsPromo")
                        .HasColumnType("boolean");

                    b.Property<bool>("MagicCardIsReprint")
                        .HasColumnType("boolean");

                    b.Property<bool>("MagicCardIsReserved")
                        .HasColumnType("boolean");

                    b.Property<bool>("MagicCardIsStarter")
                        .HasColumnType("boolean");

                    b.Property<bool>("MagicCardIsStorySpotlight")
                        .HasColumnType("boolean");

                    b.Property<bool>("MagicCardIsTextless")
                        .HasColumnType("boolean");

                    b.Property<bool>("MagicCardIsTimeshifted")
                        .HasColumnType("boolean");

                    b.Property<string>("MagicCardName")
                        .HasColumnType("text");

                    b.Property<string>("MagicCardNum")
                        .HasColumnType("text");

                    b.Property<string>("MagicCardText")
                        .HasColumnType("text");

                    b.Property<int?>("MagicSetID")
                        .HasColumnType("integer");

                    b.HasKey("MagicCardID");

                    b.HasIndex("MagicSetID");

                    b.ToTable("MagicCards");
                });

            modelBuilder.Entity("TCGCollector.Models.MagicSet", b =>
                {
                    b.Property<int>("MagicSetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MTGOCode")
                        .HasColumnType("text");

                    b.Property<int?>("MagicBlockID")
                        .HasColumnType("integer");

                    b.Property<string>("MagicParentSetCode")
                        .HasColumnType("text");

                    b.Property<string>("MagicSetCode")
                        .HasColumnType("text");

                    b.Property<string>("MagicSetCodeAlt")
                        .HasColumnType("text");

                    b.Property<bool>("MagicSetFoilOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("MagicSetKeyruneCode")
                        .HasColumnType("text");

                    b.Property<string>("MagicSetName")
                        .HasColumnType("text");

                    b.Property<bool>("MagicSetOnlineOnly")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("MagicSetReleaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MagicSetSetSize")
                        .HasColumnType("integer");

                    b.Property<int>("MagicSetTotalSize")
                        .HasColumnType("integer");

                    b.Property<int?>("MagicSetTypeID")
                        .HasColumnType("integer");

                    b.Property<bool>("MagicSetUSAOnly")
                        .HasColumnType("boolean");

                    b.HasKey("MagicSetID");

                    b.HasIndex("MagicBlockID");

                    b.HasIndex("MagicSetTypeID");

                    b.ToTable("MagicSets");
                });

            modelBuilder.Entity("TCGCollector.Models.MagicSetType", b =>
                {
                    b.Property<int>("MagicSetTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MagicSetTypeName")
                        .HasColumnType("text");

                    b.HasKey("MagicSetTypeID");

                    b.ToTable("MagicSetTypes");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardAbility", b =>
                {
                    b.Property<int>("CardID")
                        .HasColumnType("integer");

                    b.Property<int>("AbilityID")
                        .HasColumnType("integer");

                    b.HasKey("CardID", "AbilityID");

                    b.HasIndex("AbilityID");

                    b.ToTable("PokemonCardAbilities");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardAttack", b =>
                {
                    b.Property<int>("CardID")
                        .HasColumnType("integer");

                    b.Property<int>("AttackID")
                        .HasColumnType("integer");

                    b.HasKey("CardID", "AttackID");

                    b.HasIndex("AttackID");

                    b.ToTable("PokemonCardAttacks");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardEvolvesTo", b =>
                {
                    b.Property<int>("CardID")
                        .HasColumnType("integer");

                    b.Property<int>("EvolvesToID")
                        .HasColumnType("integer");

                    b.HasKey("CardID", "EvolvesToID");

                    b.HasIndex("EvolvesToID");

                    b.ToTable("PokemonCardEvolvesTos");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardPokemonType", b =>
                {
                    b.Property<int>("CardID")
                        .HasColumnType("integer");

                    b.Property<int>("PokemonTypeID")
                        .HasColumnType("integer");

                    b.HasKey("CardID", "PokemonTypeID");

                    b.HasIndex("PokemonTypeID");

                    b.ToTable("PokemonCardPokemonTypes");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardResistance", b =>
                {
                    b.Property<int>("CardID")
                        .HasColumnType("integer");

                    b.Property<int>("ResistanceID")
                        .HasColumnType("integer");

                    b.HasKey("CardID", "ResistanceID");

                    b.HasIndex("ResistanceID");

                    b.ToTable("PokemonCardResistances");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardRetreatCost", b =>
                {
                    b.Property<int>("PokemonCardRetreatCostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CardID")
                        .HasColumnType("integer");

                    b.Property<int>("EnergyTypeID")
                        .HasColumnType("integer");

                    b.Property<int?>("PokemonCardCardID")
                        .HasColumnType("integer");

                    b.HasKey("PokemonCardRetreatCostID");

                    b.HasIndex("EnergyTypeID");

                    b.HasIndex("PokemonCardCardID");

                    b.ToTable("PokemonCardRetreatCosts");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardWeakness", b =>
                {
                    b.Property<int>("CardID")
                        .HasColumnType("integer");

                    b.Property<int>("WeaknessID")
                        .HasColumnType("integer");

                    b.HasKey("CardID", "WeaknessID");

                    b.HasIndex("WeaknessID");

                    b.ToTable("PokemonCardWeaknesses");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonType", b =>
                {
                    b.Property<int>("PokemonTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PokemonTypeName")
                        .HasColumnType("text");

                    b.HasKey("PokemonTypeID");

                    b.ToTable("PokemonTypes");
                });

            modelBuilder.Entity("TCGCollector.Models.Resistance", b =>
                {
                    b.Property<int>("ResistanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EnergyTypeID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ResistanceValue")
                        .HasColumnType("text");

                    b.HasKey("ResistanceID");

                    b.HasIndex("EnergyTypeID");

                    b.ToTable("Resistances");
                });

            modelBuilder.Entity("TCGCollector.Models.Set", b =>
                {
                    b.Property<int>("SetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SetCode")
                        .HasColumnType("text");

                    b.Property<bool>("SetExpanded")
                        .HasColumnType("boolean");

                    b.Property<string>("SetLogoLocalURL")
                        .HasColumnType("text");

                    b.Property<string>("SetLogoURL")
                        .HasColumnType("text");

                    b.Property<string>("SetName")
                        .HasColumnType("text");

                    b.Property<string>("SetPTCGOCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("SetReleaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SetSeriesID")
                        .HasColumnType("integer");

                    b.Property<bool>("SetStandard")
                        .HasColumnType("boolean");

                    b.Property<string>("SetSymbolLocalURL")
                        .HasColumnType("text");

                    b.Property<string>("SetSymbolURL")
                        .HasColumnType("text");

                    b.Property<int>("SetTotalCards")
                        .HasColumnType("integer");

                    b.HasKey("SetID");

                    b.HasIndex("SetSeriesID");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("TCGCollector.Models.SetSeries", b =>
                {
                    b.Property<int>("SetSeriesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SetSeriesName")
                        .HasColumnType("text");

                    b.HasKey("SetSeriesID");

                    b.ToTable("SetSeries");
                });

            modelBuilder.Entity("TCGCollector.Models.SpecialCardSpecialCardText", b =>
                {
                    b.Property<int>("CardID")
                        .HasColumnType("integer");

                    b.Property<int>("CardTextID")
                        .HasColumnType("integer");

                    b.HasKey("CardID", "CardTextID");

                    b.HasIndex("CardTextID");

                    b.ToTable("SpecialCardSpecialCardTexts");
                });

            modelBuilder.Entity("TCGCollector.Models.SpecialCardText", b =>
                {
                    b.Property<int>("SpecialCardTextID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CardTextLine")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("SpecialCardTextID");

                    b.ToTable("SpecialCardTexts");
                });

            modelBuilder.Entity("TCGCollector.Models.TrainerCardText", b =>
                {
                    b.Property<int>("TrainerCardTextID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CardTextLine")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TrainerCardTextID");

                    b.ToTable("TrainerCardTexts");
                });

            modelBuilder.Entity("TCGCollector.Models.TrainerCardTrainerCardText", b =>
                {
                    b.Property<int>("CardID")
                        .HasColumnType("integer");

                    b.Property<int>("CardTextID")
                        .HasColumnType("integer");

                    b.HasKey("CardID", "CardTextID");

                    b.HasIndex("CardTextID");

                    b.ToTable("TrainerCardTrainerCardTexts");
                });

            modelBuilder.Entity("TCGCollector.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserLogin")
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TCGCollector.Models.UserCardCollection", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<int>("CardCollectionID")
                        .HasColumnType("integer");

                    b.HasKey("UserID", "CardCollectionID");

                    b.HasIndex("CardCollectionID");

                    b.ToTable("UserCardCollection");
                });

            modelBuilder.Entity("TCGCollector.Models.Weakness", b =>
                {
                    b.Property<int>("WeaknessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EnergyTypeID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WeaknessValue")
                        .HasColumnType("text");

                    b.HasKey("WeaknessID");

                    b.HasIndex("EnergyTypeID");

                    b.ToTable("Weaknesses");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCard", b =>
                {
                    b.HasBaseType("TCGCollector.Models.Card");

                    b.Property<int>("ConvertedRetreatCost")
                        .HasColumnType("integer");

                    b.Property<string>("EvolvesFrom")
                        .HasColumnType("text");

                    b.Property<int>("HP")
                        .HasColumnType("integer");

                    b.Property<int>("NationalPokedexNumber")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("PokemonCard");
                });

            modelBuilder.Entity("TCGCollector.Models.SpecialCard", b =>
                {
                    b.HasBaseType("TCGCollector.Models.Card");

                    b.HasDiscriminator().HasValue("SpecialCard");
                });

            modelBuilder.Entity("TCGCollector.Models.TrainerCard", b =>
                {
                    b.HasBaseType("TCGCollector.Models.Card");

                    b.HasDiscriminator().HasValue("TrainerCard");
                });

            modelBuilder.Entity("TCGCollector.Models.AttackEnergy", b =>
                {
                    b.HasOne("TCGCollector.Models.Attack", "Attack")
                        .WithMany("AttackEnergies")
                        .HasForeignKey("AttackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGCollector.Models.EnergyType", "EnergyType")
                        .WithMany("AttackEnergies")
                        .HasForeignKey("EnergyTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGCollector.Models.Card", b =>
                {
                    b.HasOne("TCGCollector.Models.CardCat", "CardCat")
                        .WithMany("Cards")
                        .HasForeignKey("CardCatID");

                    b.HasOne("TCGCollector.Models.CardRarity", "CardRarity")
                        .WithMany("Cards")
                        .HasForeignKey("CardRarityID");

                    b.HasOne("TCGCollector.Models.CardType", "CardType")
                        .WithMany("Cards")
                        .HasForeignKey("CardTypeID");

                    b.HasOne("TCGCollector.Models.Set", "Set")
                        .WithMany("Cards")
                        .HasForeignKey("SetID");
                });

            modelBuilder.Entity("TCGCollector.Models.MagicCard", b =>
                {
                    b.HasOne("TCGCollector.Models.MagicSet", "MagicSet")
                        .WithMany("MagicCards")
                        .HasForeignKey("MagicSetID");
                });

            modelBuilder.Entity("TCGCollector.Models.MagicSet", b =>
                {
                    b.HasOne("TCGCollector.Models.MagicBlock", "MagicBlock")
                        .WithMany("MagicSets")
                        .HasForeignKey("MagicBlockID");

                    b.HasOne("TCGCollector.Models.MagicSetType", "MagicSetType")
                        .WithMany("MagicSets")
                        .HasForeignKey("MagicSetTypeID");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardAbility", b =>
                {
                    b.HasOne("TCGCollector.Models.Ability", "Ability")
                        .WithMany("PokemonCardAbilities")
                        .HasForeignKey("AbilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGCollector.Models.PokemonCard", "PokemonCard")
                        .WithMany("PokemonCardAbilities")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardAttack", b =>
                {
                    b.HasOne("TCGCollector.Models.Attack", "Attack")
                        .WithMany("PokemonCardAttacks")
                        .HasForeignKey("AttackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGCollector.Models.PokemonCard", "PokemonCard")
                        .WithMany("PokemonCardAttacks")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardEvolvesTo", b =>
                {
                    b.HasOne("TCGCollector.Models.PokemonCard", "PokemonCard")
                        .WithMany("PokemonCardEvolvesTos")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGCollector.Models.EvolvesTo", "EvolvesTo")
                        .WithMany("PokemonCardEvolvesTos")
                        .HasForeignKey("EvolvesToID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardPokemonType", b =>
                {
                    b.HasOne("TCGCollector.Models.PokemonCard", "PokemonCard")
                        .WithMany("PokemonCardPokemonTypes")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGCollector.Models.PokemonType", "PokemonType")
                        .WithMany("PokemonCardPokemonTypes")
                        .HasForeignKey("PokemonTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardResistance", b =>
                {
                    b.HasOne("TCGCollector.Models.PokemonCard", "PokemonCard")
                        .WithMany("PokemonCardResistances")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGCollector.Models.Resistance", "Resistance")
                        .WithMany("PokemonCardResistances")
                        .HasForeignKey("ResistanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardRetreatCost", b =>
                {
                    b.HasOne("TCGCollector.Models.EnergyType", "EnergyType")
                        .WithMany("PokemonCardRetreatCosts")
                        .HasForeignKey("EnergyTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGCollector.Models.PokemonCard", "PokemonCard")
                        .WithMany("PokemonCardRetreatCosts")
                        .HasForeignKey("PokemonCardCardID");
                });

            modelBuilder.Entity("TCGCollector.Models.PokemonCardWeakness", b =>
                {
                    b.HasOne("TCGCollector.Models.PokemonCard", "PokemonCard")
                        .WithMany("PokemonCardWeaknesses")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGCollector.Models.Weakness", "Weakness")
                        .WithMany("PokemonCardWeaknesses")
                        .HasForeignKey("WeaknessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGCollector.Models.Resistance", b =>
                {
                    b.HasOne("TCGCollector.Models.EnergyType", "EnergyType")
                        .WithMany()
                        .HasForeignKey("EnergyTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGCollector.Models.Set", b =>
                {
                    b.HasOne("TCGCollector.Models.SetSeries", "SetSeries")
                        .WithMany("Sets")
                        .HasForeignKey("SetSeriesID");
                });

            modelBuilder.Entity("TCGCollector.Models.SpecialCardSpecialCardText", b =>
                {
                    b.HasOne("TCGCollector.Models.SpecialCard", "SpecialCard")
                        .WithMany("SpecialCardSpecialCardTexts")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGCollector.Models.SpecialCardText", "CardText")
                        .WithMany("SpecialCardSpecialCardTexts")
                        .HasForeignKey("CardTextID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGCollector.Models.TrainerCardTrainerCardText", b =>
                {
                    b.HasOne("TCGCollector.Models.TrainerCard", "TrainerCard")
                        .WithMany("TrainerCardTrainerCardTexts")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGCollector.Models.TrainerCardText", "CardText")
                        .WithMany("TrainerCardTrainerCardTexts")
                        .HasForeignKey("CardTextID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGCollector.Models.UserCardCollection", b =>
                {
                    b.HasOne("TCGCollector.Models.CardCollection", "CardCollection")
                        .WithMany("UserCardCollections")
                        .HasForeignKey("CardCollectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGCollector.Models.User", "User")
                        .WithMany("UserCardCollections")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGCollector.Models.Weakness", b =>
                {
                    b.HasOne("TCGCollector.Models.EnergyType", "EnergyType")
                        .WithMany()
                        .HasForeignKey("EnergyTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
